
do u know how the finances and comptability in algeria works for suppliers, i want to create a software to do the paper work and automate thing for the suppliers, the scenario is : an entreprise needs like pcs  so the suppliers will buy the pcs and sell them to the entreprise, so in the viewpoint of the supplier  he needs to do the paper work and statistics of the gain and maargin and taxes and benefits and stuff. so this software will facilitate the work of the supplier so he'll not need a secretary to do that crabby repetetive work in excel.

I understand you want to create a software solution for suppliers in Algeria to manage their financial and accounting workflows, particularly focusing on the business-to-business (B2B) sales process. Let me help you break down the key components we'll need to implement based on Algerian business practices:

Key Features Needed:

Document Management:
Facture Proforma (Price Quote)
Bon de Commande (Purchase Order)
Bon de Livraison (Delivery Note)
Facture (Invoice)
Reçu de Paiement (Payment Receipt)
Financial Calculations:
Purchase price tracking
Selling price calculation
Margin calculation
TVA (VAT) calculations (19% standard rate in Algeria)
TAP (Professional Activity Tax - usually 2%)
IBS (Corporate Income Tax)
Statistics and Reporting:
Monthly/Yearly sales reports
Profit margins analysis
Customer payment tracking
Tax declaration preparation
Let's start by creating a basic structure for this project. I'll help you set up the initial files and database schema.


Project Setup:
Code
CopyInsert
"Create the initial project structure with Flask backend setup, including the requirements.txt and basic configuration files"
Database Models:
Code
CopyInsert
"Create the database models for the supplier management system, including Product, Client, Invoice, and Transaction models with proper relationships"
Authentication System:
Code
CopyInsert
"Implement user authentication system for suppliers to login and manage their accounts"
Document Templates:
Code
CopyInsert
"Create templates for Algerian business documents: Facture Proforma, Bon de Commande, Bon de Livraison, Facture, and Reçu de Paiement"
Financial Calculations:
Code
CopyInsert
"Implement the financial calculation modules for TVA (19%), TAP (2%), margins, and profit calculations"
Product Management:
Code
CopyInsert
"Create the product management system with CRUD operations and stock tracking"
Client Management:
Code
CopyInsert
"Implement the client management system with CRUD operations and client history tracking"
Invoice Generation:
Code
CopyInsert
"Create the invoice generation system with automatic numbering and tax calculations"
Payment Tracking:
Code
CopyInsert
"Implement the payment tracking system with different payment methods and status updates"
Reports Generation:
Code
CopyInsert
"Create the reporting system for monthly sales, profit margins, and tax declarations"
Dashboard:
Code
CopyInsert
"Design and implement the main dashboard with key metrics and charts"
PDF Export:
Code
CopyInsert
"Implement PDF export functionality for all business documents"
Frontend Development:
Code
CopyInsert
"Create the frontend interface using a modern framework (React/Vue.js) with responsive design"
API Development:
Code
CopyInsert
"Implement the REST API endpoints for all backend functionalities"
Testing:
Code
CopyInsert
"Add unit tests and integration tests for the main functionalities"
Deployment:
Code
CopyInsert
"Set up deployment configuration and provide deployment instructions"
Additional Specific Feature Prompts:

Tax Management:
Code
CopyInsert
"Implement detailed tax management system specific to Algerian regulations"
Stock Management:
Code
CopyInsert
"Create the inventory management system with alerts for low stock"
Financial Analytics:
Code
CopyInsert
"Implement financial analytics with visualizations for business insights"
Document Archive:
Code
CopyInsert
"Create a document archiving system with search functionality"
Multi-Currency Support:
Code
CopyInsert
"Add support for multiple currencies with conversion rates (DZD primary)"
User Settings:
Code
CopyInsert
"Implement user settings and company profile management"
Backup System:
Code
CopyInsert
"Create automated backup system for all business data"
Tips for using these prompts:

Start with prompts 1-4 to set up the basic infrastructure
Then implement core features (prompts 5-9)
Add reporting and analytics (prompts 10-11)
Finally, add additional features based on your specific needs
For each prompt:

Ask for detailed code implementation
Request explanations of the code
Ask for testing instructions
Request any necessary configuration details
Additional questions you can ask:

"How can I customize [specific feature] for my needs?"
"What security measures should I implement for [specific feature]?"
"How can I optimize the performance of [specific component]?"
"What are the best practices for [specific functionality]?"
"How can I add [specific Algerian regulation] compliance to this feature?"
Remember to:

Test each component thoroughly before moving to the next
Keep track of any dependencies added to requirements.txt
Document any configuration changes needed
Save and backup your code regularly




tests/test_auth_forms.py:
Tests for login form validation
Tests for registration form validation
Tests for unique email validation
Tests for password confirmation
Tests for Algerian business identifier validation
tests/test_auth_routes.py:
Tests for page loading (login, register, profile)
Tests for successful login
Tests for failed login attempts
Tests for logout functionality
Tests for user registration
Tests for duplicate registration prevention
Tests for profile page access
Tests for password change functionality
The tests cover:

Form validation
Route functionality
Authentication flow
Database operations
Access control
Error handling
User feedback messages
To run the tests, follow these steps:

Install test dependencies:
bash
CopyInsert in Terminal
pip install -r requirements-test.txt
Run the tests:
bash
CopyInsert in Terminal
pytest tests/
For coverage report:
bash
CopyInsert in Terminal
pytest --cov=app tests/
Each test is well-documented and follows testing best practices:

Independent test cases
Clear test names and descriptions
Comprehensive assertions
Proper setup and teardown
Database isolation
CSRF protection disabled for testing
The tests ensure that:

Users can register with valid information
Duplicate registrations are prevented
Login works with correct credentials
Invalid login attempts are rejected
Password changes are processed correctly
Profile information is displayed properly
Form validation works as expected
Algerian business identifiers are properly validated
Would you like to start with any specific prompt from this list?